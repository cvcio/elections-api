version: '3'

services:
  reverse-proxy:
    image: traefik # The official Traefik docker image
    command: --api --docker # Enables the web UI and tells Traefik to listen to docker
    ports:
      - "80:80"     # The HTTP port
      - "8080:8080" # The Web UI (enabled by --api)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.6.1
    ports:
      - 9200:9200
      - 9300:9300
    environment:
     - discovery.type=single-node
     - bootstrap.memory_lock=true
     - ES_JAVA_OPTS=-Xms512m -Xmx512m
     - network.host=0.0.0.0
    labels:
      - "traefik.frontend.rule=Host:elasticsearch.docker.localhost"

  kibana:
    image: docker.elastic.co/kibana/kibana-oss:6.6.1
    ports:
      - 5601:5601
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    labels:
      - "traefik.frontend.rule=Host:kibana.docker.localhost"

  mongo:
    image: mongo:latest
    ports: 
      - 27017:27017
    volumes:
      - data_mongo:/data/db
    labels:
      - "traefik.frontend.rule=Host:mongo.docker.localhost"
  mongo-express:
    image: mongo-express
    ports:
      - 8081:8081
    links:
      - mongo:mongo
    labels:
      - "traefik.frontend.rule=Host:express.docker.localhost"
    # environment:
    #   ME_CONFIG_MONGODB_ADMINUSERNAME: root
    #   ME_CONFIG_MONGODB_ADMINPASSWORD: example

  # neo4j:
  #   image: neo4j:3.5.0
  #   # ports:
  #   #   - 7474:7474
  #   #   - 7687:7687
  #   environment:
  #     - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
  #     - NEO4J_AUTH=none
  #   volumes:
  #     - data_neo4j:/data
  #   labels:
  #     - "traefik.frontend.rule=Host:neo4j.docker.localhost"
  redis:
    image: redis:5
    ports: 
      - 6379:6379
    volumes:
      - data_redis:/data
    labels:
      - "traefik.frontend.rule=Host:redis.docker.localhost"
volumes:
  # data_neo4j:
  data_mongo:
  data_redis:
  # data_elasticsearh: