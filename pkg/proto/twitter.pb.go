// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/twitter.proto

package elections_mediawatch_io

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Session struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_twitter_969f9720844addcb, []int{0}
}
func (m *Session) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Session.Unmarshal(m, b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Session.Marshal(b, m, deterministic)
}
func (dst *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(dst, src)
}
func (m *Session) XXX_Size() int {
	return xxx_messageInfo_Session.Size(m)
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Session) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Message struct {
	Tweet                string   `protobuf:"bytes,1,opt,name=tweet,proto3" json:"tweet,omitempty"`
	Session              *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_twitter_969f9720844addcb, []int{1}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetTweet() string {
	if m != nil {
		return m.Tweet
	}
	return ""
}

func (m *Message) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func init() {
	proto.RegisterType((*Session)(nil), "elections.mediawatch.io.Session")
	proto.RegisterType((*Message)(nil), "elections.mediawatch.io.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TwitterClient is the client API for Twitter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TwitterClient interface {
	Connect(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (Twitter_StreamClient, error)
}

type twitterClient struct {
	cc *grpc.ClientConn
}

func NewTwitterClient(cc *grpc.ClientConn) TwitterClient {
	return &twitterClient{cc}
}

func (c *twitterClient) Connect(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/elections.mediawatch.io.Twitter/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Twitter_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Twitter_serviceDesc.Streams[0], "/elections.mediawatch.io.Twitter/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &twitterStreamClient{stream}
	return x, nil
}

type Twitter_StreamClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type twitterStreamClient struct {
	grpc.ClientStream
}

func (x *twitterStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *twitterStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TwitterServer is the server API for Twitter service.
type TwitterServer interface {
	Connect(context.Context, *Session) (*Session, error)
	Stream(Twitter_StreamServer) error
}

func RegisterTwitterServer(s *grpc.Server, srv TwitterServer) {
	s.RegisterService(&_Twitter_serviceDesc, srv)
}

func _Twitter_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elections.mediawatch.io.Twitter/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).Connect(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TwitterServer).Stream(&twitterStreamServer{stream})
}

type Twitter_StreamServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type twitterStreamServer struct {
	grpc.ServerStream
}

func (x *twitterStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *twitterStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Twitter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elections.mediawatch.io.Twitter",
	HandlerType: (*TwitterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Twitter_Connect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Twitter_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/twitter.proto",
}

func init() { proto.RegisterFile("proto/twitter.proto", fileDescriptor_twitter_969f9720844addcb) }

var fileDescriptor_twitter_969f9720844addcb = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x9b, 0xa2, 0x0d, 0x8e, 0xe0, 0x61, 0x14, 0x2c, 0x3d, 0x95, 0x9c, 0x7a, 0x31, 0x4a,
	0xbd, 0x79, 0xf5, 0x2c, 0x42, 0xeb, 0xcd, 0x53, 0x6c, 0x07, 0x37, 0xb0, 0x4d, 0x4a, 0x33, 0x50,
	0xf6, 0x4f, 0xed, 0x6f, 0x5c, 0x48, 0xbb, 0xc7, 0xdd, 0xde, 0xf2, 0xc2, 0x7b, 0xdf, 0x9b, 0x19,
	0x78, 0x1c, 0x27, 0xcf, 0xfe, 0x95, 0x67, 0xcb, 0x4c, 0x93, 0x8e, 0x0a, 0x9f, 0x69, 0x4f, 0x1d,
	0x5b, 0xef, 0x82, 0x1e, 0xa8, 0xb7, 0x66, 0x36, 0xdc, 0xed, 0xb4, 0xf5, 0xea, 0x05, 0x64, 0x4b,
	0x21, 0x58, 0xef, 0xf0, 0x01, 0x52, 0xdb, 0xe7, 0xa2, 0x14, 0xd5, 0x5d, 0x93, 0xda, 0x1e, 0x11,
	0x6e, 0xf8, 0x30, 0x52, 0x9e, 0xc6, 0x9f, 0xf8, 0x56, 0xbf, 0x20, 0xbf, 0x28, 0x04, 0xf3, 0x4f,
	0xf8, 0x04, 0xb7, 0x3c, 0x13, 0xf1, 0x9a, 0x58, 0x04, 0x7e, 0x80, 0x0c, 0x0b, 0x2f, 0xe6, 0xee,
	0xeb, 0x52, 0x5f, 0xa8, 0xd6, 0x6b, 0x6f, 0x73, 0x0e, 0xd4, 0x47, 0x01, 0xf2, 0x67, 0x19, 0x1b,
	0xbf, 0x41, 0x7e, 0x7a, 0xe7, 0xa8, 0x63, 0xdc, 0x24, 0x14, 0x9b, 0x0e, 0x95, 0x60, 0x03, 0x59,
	0xcb, 0x13, 0x99, 0xe1, 0x0a, 0x6f, 0x5d, 0xad, 0xd8, 0x74, 0xa8, 0xa4, 0x12, 0x6f, 0xe2, 0x2f,
	0x8b, 0xc7, 0x7d, 0x3f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x13, 0xf2, 0x1e, 0x73, 0x01, 0x00,
	0x00,
}
